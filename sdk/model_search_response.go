/*
 * lighthouse
 *
 * lighthouse  20210117
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// SearchResponse struct for SearchResponse
type SearchResponse struct {
	ClaimId *string `json:"claimId,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewSearchResponse instantiates a new SearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResponse() *SearchResponse {
	this := SearchResponse{}
	return &this
}

// NewSearchResponseWithDefaults instantiates a new SearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResponseWithDefaults() *SearchResponse {
	this := SearchResponse{}
	return &this
}

// GetClaimId returns the ClaimId field value if set, zero value otherwise.
func (o *SearchResponse) GetClaimId() string {
	if o == nil || o.ClaimId == nil {
		var ret string
		return ret
	}
	return *o.ClaimId
}

// GetClaimIdOk returns a tuple with the ClaimId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetClaimIdOk() (*string, bool) {
	if o == nil || o.ClaimId == nil {
		return nil, false
	}
	return o.ClaimId, true
}

// HasClaimId returns a boolean if a field has been set.
func (o *SearchResponse) HasClaimId() bool {
	if o != nil && o.ClaimId != nil {
		return true
	}

	return false
}

// SetClaimId gets a reference to the given string and assigns it to the ClaimId field.
func (o *SearchResponse) SetClaimId(v string) {
	o.ClaimId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SearchResponse) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SearchResponse) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SearchResponse) SetName(v string) {
	o.Name = &v
}

func (o SearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClaimId != nil {
		toSerialize["claimId"] = o.ClaimId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableSearchResponse struct {
	value *SearchResponse
	isSet bool
}

func (v NullableSearchResponse) Get() *SearchResponse {
	return v.value
}

func (v *NullableSearchResponse) Set(val *SearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResponse(val *SearchResponse) *NullableSearchResponse {
	return &NullableSearchResponse{value: val, isSet: true}
}

func (v NullableSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


